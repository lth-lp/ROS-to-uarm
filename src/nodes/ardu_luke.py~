import rospy
import tf
import math
from math import sin, cos, pi
import sys

from sensor_msgs.msg import JointState
from SerialDataGateway import SerialDataGateway

class Arduino(object):

	def _HandleReceivedLine(self,  line):
		self._Counter = self._Counter + 1
		#rospy.logdebug(str(self._Counter) + " " + line)
		#if (self._Counter % 50 == 0):
		self._Publisher.publish(String(str(self._Counter) + " " + line))

		self.Publisher.publish(sensor_msg)


	def __init__(self, port="/dev/ttyUSB0", baudrate=9600):
		'''
		Initializes the receiver class. 
		port: The serial port to listen to.
		baudrate: Baud rate for the serial communication
		'''

		self._Counter = 0

		rospy.init_node('arduino')

		port = rospy.get_param("~port", "/dev/ttyUSB0")
		baudRate = int(rospy.get_param("~baudRate", 9600))

		rospy.loginfo("Starting with serial port: " + port + ", baud rate: " + str(baudRate))

		# subscriptions
		rospy.Subscriber("cmd_vel", Twist, self._HandleVelocityCommand)
		self._Publisher = rospy.Publisher('serial', String)

		self._jsPub = rospy.Publisher('joint_states', JointState)

		self._SerialDataGateway = SerialDataGateway(port, baudRate,  self._HandleReceivedLine)

###   Versuch	###
		self._joint = JointState

		pos_array = []
		substring = ""
		for letter in line:
			if letter == ",":
				pos_array.append(substring)
				substring = ""
			else:
				substring.append(letter)
			
		for i in range(4):
			self._joint.name.append(("Joint ")+str(i+1))
			self._joint.position.append(float(pos_array[i]))
			self._joint.efford.append()
###		###

	def Start(self):
		rospy.logdebug("Starting")
		self._SerialDataGateway.Start()

	def Stop(self):
		rospy.logdebug("Stopping")
		self._SerialDataGateway.Stop()
		
	def _HandleVelocityCommand(self, twistCommand):
		""" Handle movement requests. """
		v = twistCommand.linear.x        # m/s
		omega = twistCommand.angular.z      # rad/s
		rospy.loginfo("Handling twist command: " + str(v) + "," + str(omega))

		message = 's %d %d %d %d \r' % self._GetBaseAndExponents((v, omega))
		rospy.logdebug("Sending speed command message: " + message)
		self._SerialDataGateway.Write(message)

if __name__ == '__main__':
	arduino = Arduino()
	try:
		arduino.Start()
		rospy.spin()

	except rospy.ROSInterruptException:
		arduino.Stop()
